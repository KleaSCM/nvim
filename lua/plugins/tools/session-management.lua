--[[
 * Session and project management module.
 * 
 * Provides session persistence, project management, and dashboard configuration.
 * 
 * Author: KleaSCM
 * Email: KleaSCM@gmail.com
 * File: tools/session-management.lua
 * Description: Session and project management with beautiful dashboard
--]]

return {
	-- Session persistence
	{
		"folke/persistence.nvim",
		event = "BufReadPre",
		config = function()
			-- „ÅÇ„Åü„Åó„ÄÅ„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÇíÁæé„Åó„Åè„Åó„Åü„ÅÆ‚Ä¶„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåÁ∞°Âçò„Å´‰øùÂ≠ò„Åï„Çå„Çã„Çà„ÅÜ„Å´Ôºà‚ïπ‚ó°‚ïπÔºâ
			require("persistence").setup({
				dir = vim.fn.expand(vim.fn.stdpath("state") .. "/sessions/"),
				options = { "buffers", "curdir", "tabpages", "winsize", "help", "globals", "skiprtp", "folds" },
			})
		end,
	},

	-- Project management
	{
		"ahmedkhalf/project.nvim",
		config = function()
			-- „ÅÇ„Åü„Åó„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ„ÇíÁæé„Åó„Åè„Åó„Åü„ÅÆ‚Ä¶„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåÁ∞°Âçò„Å´Ë¶ã„Å§„Åã„Çã„Çà„ÅÜ„Å´Ôºà‚ïπ‚ó°‚ïπÔºâ
			require("project_nvim").setup({
				detection_methods = { "lsp", "pattern" },
				patterns = { ".git", "_darcs", ".hg", ".bzr", ".svn", "Makefile", "package.json", "pom.xml", "build.xml", "CMakeLists.txt" },
				ignore_lsp = { "efm" },
				exclude_dirs = {},
				show_hidden = false,
				silent_chdir = true,
				scope_chdir = "global",
				datapath = vim.fn.stdpath("data"),
			})

			-- Keybindings for project management
			vim.keymap.set("n", "<leader>pp", "<cmd>ProjectRoot<CR>", { desc = "üè† Go to Project Root" })
			vim.keymap.set("n", "<leader>pl", "<cmd>ProjectList<CR>", { desc = "üìÅ Project List" })
			vim.keymap.set("n", "<leader>pc", "<cmd>ProjectClose<CR>", { desc = "üö™ Close Project" })
		end,
	},

	-- Beautiful project dashboard
	{
		"nvimdev/dashboard-nvim",
		event = "VimEnter",
		config = function()
			-- „ÅÇ„Åü„Åó„ÄÅ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÇíÁæé„Åó„Åè„Åó„Åü„ÅÆ‚Ä¶„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåÁ∞°Âçò„Å´Ë¶ã„Åà„Çã„Çà„ÅÜ„Å´Ôºà‚ïπ‚ó°‚ïπÔºâ
			require("dashboard").setup({
				theme = "hyper",
				config = {
					week_header = {
						enable = true,
					},
					shortcut = {
						{ desc = "üíæ Sessions", group = "DiagnosticHint", action = "lua require('persistence').load()", key = "s" },
						{ desc = "üè† Projects", group = "DiagnosticHint", action = "lua require('project_nvim').list()", key = "p" },
						{ desc = "üìÅ Files", group = "DiagnosticHint", action = "lua require('telescope.builtin').find_files()", key = "f" },
						{ desc = "üîç Search", group = "DiagnosticHint", action = "lua require('telescope.builtin').live_grep()", key = "g" },
						{ desc = "üåø Git", group = "DiagnosticHint", action = "lua if vim.fn.isdirectory(vim.fn.getcwd() .. '/.git') == 1 then require('telescope.builtin').git_status() else vim.notify('Not in a git repository', vim.log.levels.INFO) end", key = "i" },
						{ desc = "‚öôÔ∏è Config", group = "DiagnosticHint", action = "lua vim.cmd('edit ~/.config/nvim/init.lua')", key = "c" },
					},
					packages = { enable = true },
					footer = {
						"",
						"üíï üíï",
						"<leader>dd - Return to dashboard from anywhere! üíú",
						"",
						"",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚††‚†§‚†§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚††‚¢Ä‚£¢‚£à‚£â‚†Å‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚°è‚¢†‚£æ‚¢∑‚¢∂‚£Ñ‚£ï‚†¢‚¢Ñ‚†Ä‚†Ä‚£Ä‚£†‚†§‚†î‚†í‚†í‚†í‚†í‚†í‚†í‚†¢‚†§‚†Ñ‚£Ä‚†§‚¢ä‚£§‚£∂‚£ø‚°ø‚£ø‚¢π‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚¢ª‚†à‚£ø‚¢´‚°û‚†õ‚°ü‚£∑‚£¶‚°ù‚†ã‚†â‚£§‚£§‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚°ó‚¢≤‚£¥‚†Ä‚†à‚†ë‚£ø‚°ü‚°è‚†Ä‚¢±‚£Æ‚°è‚¢®‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†∏‚°Ö‚£π‚£ø‚†Ä‚†Ä‚¢©‚°Ω‚†ã‚£†‚£§‚£ø‚£ø‚£è‚£õ‚°ª‚†ø‚£ø‚¢ü‚£π‚£¥‚¢ø‚£π‚£ø‚°ü‚¢¶‚£Ä‚†ô‚¢∑‚£§‚£º‚£æ‚¢Å‚°æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ä‚¢≥‚£ü‚£∂‚†Ø‚¢Ä‚°æ‚¢ç‚†ª‚£ø‚£ø‚£Ω‚£ø‚£Ω‚°ª‚£ß‚£ü‚¢æ‚£π‚°Ø‚¢∑‚°ø‚†Å‚†Ä‚¢ª‚£¶‚°à‚¢ø‚°ü‚†Å‚°º‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∑‚††‚¢ª‚†è‚¢∞‚£Ø‚°û‚°å‚£µ‚†£‚†ò‚°â‚¢à‚†ì‚°ø‚†≥‚£Ø‚†ã‚†Å‚†Ä‚†Ä‚¢≥‚°Ä‚£∞‚£ø‚£ø‚£∑‚°à‚¢£‚°æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£é‚†Ä‚£ø‚£ø‚£∑‚£æ‚£∑‚£º‚£µ‚£Ü‚†Ç‚°ê‚¢Ä‚£¥‚£å‚†Ä‚£Ä‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ä‚†£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†ë‚¢∫‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≥‚£ø‚¢Ω‚£ß‚°§‚¢§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£à‚¢π‚£ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚¢π‚£ø‚£ª‚¢ø‚£ø‚¢ø‚£Ω‚£≥‚£Ø‚£ø‚¢∑‚£ø‚°∑‚£ü‚£Ø‚£ª‚£Ω‚†ß‚†æ‚¢§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢á‚†§‚¢æ‚£ü‚°æ‚£Ω‚£ø‚£Ω‚£ª‚°ó‚¢π‚°ø‚¢ø‚£ª‚†∏‚¢ø‚¢Ø‚°ü‚°ø‚°Ω‚£ª‚£Ø‚£ø‚£é‚¢∑‚££‚°ø‚¢æ‚¢ï‚£é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚°û‚°ü‚£ª‚£Æ‚£ç‚°õ‚¢ø‚£Ω‚£ª‚°Ä‚†Å‚£ü‚££‚†ø‚°†‚£ø‚¢è‚°û‚†ß‚†Ω‚¢µ‚£≥‚£ø‚£∫‚£ø‚¢ø‚°ã‚†ô‚°Ä‚†á‚†±‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚††‚†Å‚†Ä‚¢ª‚°ø‚£õ‚£Ω‚£ø‚¢ü‚°Å‚£≠‚£•‚£Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∂‚£ü‚£ß‚†ø‚¢ø‚£ø‚£Ø‚£ø‚°á‚†Ä‚°á‚†Ä‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚°á‚¢π‚£æ‚£ø‚£ø‚£∑‚°ø‚¢ø‚¢∑‚°è‚°à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°π‚°∑‚°é‚¢∏‚£ø‚£ø‚£ø‚°á‚†Ä‚°á‚†Ä‚†∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ñ‚†Ç‚†ñ‚¢∏‚£ø‚£ø‚£ø‚°è‚¢É‚†ò‚°ä‚†©‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Å‚¢π‚£ø‚£ø‚£ø‚°á‚¢∞‚¢Å‚°å‚¢Ä‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∑‚°ò‚†ú‚£§‚£ø‚£ø‚£ø‚£∑‚°Ö‚†ê‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ß‚£ï‚£º‚£†‚°µ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ª‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£æ‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≥‚£ø‚°∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚¢°‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚°ü‚£Ω‚†â‚†Ä‚†í‚†Ç‚†â‚£Ø‚¢π‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ø‚°á‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚†Ä‚¢∞‚°è‚£º‚°ø‚£ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ª‚°ø‚†Å‚†ò‚°Ü‚†Ä‚†Ä‚†Ä‚¢†‚†á‚†ò‚£ø‚£ø‚£Ω‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ø‚£∑‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚¢Ä‚°ü‚¢∞‚£æ‚¢ø‚£ø‚£ü‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ø‚£ß‚†Ä‚†Ä‚†à‚†£‚°Ñ‚°∞‚†ã‚†Ä‚¢Ä‚¢æ‚£ø‚°õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚¢∏‚¢Å‚¢¶‚£ø‚£ª‚£ø‚¢ø‚£ª‚°Ω‚£æ‚¢ø‚°ø‚¢∑‚£Ω‚£ª‚†É‚†Ç‚†¥‚£é‚†ò‚†¶‚°∏‚††‚†Ñ‚¢ª‚£ü‚£ø‚†ª‚£ø‚£ª‚¢∑‚£Ø‚¢ø‚£ø‚£Ω‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚†Ä‚°á‚†é‚£º‚°∑‚£ø‚£ü‚£ø‚£Ø‚¢ø‚£Ω‚£û‚°á‚£∏‚£∑‚°á‚†∞‚†ó‚†ê‚£∫‚£Ä‚£º‚†í‚†í‚†¶‚†∞‚£ø‚£Ø‚†á‚¢≥‚£Ø‚£ø‚£û‚£ø‚¢æ‚£ø‚¢ø‚¢≥‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚¢∏‚°ø‚¢†‚£ø‚£ª‚£ø‚¢ø‚£º‚£ø‚£ø‚£ø‚£º‚£Ñ‚°ª‚¢º‚£ß‚†Ä‚£Ä‚£º‚†ü‚£ª‚°ü‚¢ß‚£§‚£Ñ‚¢†‚£ø‚°É‚¢º‚£ø‚¢ß‚£ø‚£ø‚°ø‚£ü‚£ø‚£ø‚°Ñ‚¢ª‚°Ä‚†Ä‚†Ä‚†Ä",
						"‚†Ä‚£º‚†Ä‚£æ‚°∑‚£ø‚£ø‚£ø‚¢æ‚£ø‚£ø‚¢æ‚†ó‚£õ‚°•‚£æ‚†ü‚£û‚†â‚¢Ä‚£†‚†ô‚¢∞‚£Ä‚°à‚¢ô‚°ü‚£ø‚£Ω‚£≤‚¢≠‚¢õ‚£ø‚£ø‚£ª‚£Ω‚£æ‚£∑‚£∑‚°Ä‚†±‚°Ä‚†Ä‚†Ä",
						"‚¢†‚¢õ‚£∞‚£ø‚£ü‚£ø‚£ø‚£ø‚£ø‚£ø‚¢Ø‚£ø‚£ß‚¢π‚£Ω‚£ª‚¢æ‚£Æ‚£∑‚£†‚†ó‚¢™‚†ê‚¢ß‚£º‚£∑‚£∂‚£æ‚¢∑‚£Ø‚†è‚£º‚£ø‚£ª‚£Ø‚£ø‚£ø‚£ø‚£Ø‚£∑‚°Ñ‚¢£‚†Ä‚†Ä",
						"‚°å‚°Ü‚£ø‚£ø‚£ø‚£ø‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°π‚£ø‚£ü‚£æ‚£≥‚£ø‚£ß‚£º‚£¥‚£ù‚£õ‚¢æ‚£∑‚£Ø‚£ø‚¢ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£∑‚†à‚°á‚†Ä",
						"‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ñ‚£∑‚£Ø‚£ü‚£ø‚°ø‚¢ü‚£°‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†ê‚†Ä",
						"",
					},
				},
			})
			
			-- „ÅÇ„Åü„Åó„ÄÅASCII„Ç¢„Éº„Éà„ÅÆËâ≤„ÇíÂº∑Âà∂ÁöÑ„Å´Ë®≠ÂÆö„Åó„Åü„ÅÆ‚Ä¶ÈªÑËâ≤„ÅåÂ´å„Å†„Å£„Åü„Åã„ÇâÔºà‚ïπ‚ó°‚ïπÔºâ
			-- Force proper colors for the ASCII art
			vim.api.nvim_create_autocmd("VimEnter", {
				callback = function()
					-- Wait a bit for dashboard to load
					vim.defer_fn(function()
						-- Force white color for ASCII art
						vim.cmd("highlight DashboardFooter guifg=#ffffff guibg=NONE")
						vim.cmd("highlight DashboardHeader guifg=#ffffff guibg=NONE")
						vim.cmd("highlight DashboardCenter guifg=#ffffff guibg=NONE")
						vim.cmd("highlight DashboardShortcut guifg=#ffffff guibg=NONE")
						
						-- Force specific colors for different parts
						vim.cmd("highlight DashboardShortcutIcon guifg=#fd79a8 guibg=NONE") -- Pink
						vim.cmd("highlight DashboardShortcutSection guifg=#74b9ff guibg=NONE") -- Blue
						vim.cmd("highlight DashboardShortcutKey guifg=#fdcb6e guibg=NONE") -- Yellow
						vim.cmd("highlight DashboardShortcutDesc guifg=#6bcf7f guibg=NONE") -- Green
						
						-- Force white for the ASCII art footer
						vim.cmd("highlight DashboardFooter guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
					end, 100)
				end,
				once = true,
			})
			
			-- Also apply colors when dashboard is opened
			vim.api.nvim_create_autocmd("User", {
				pattern = "DashboardReady",
				callback = function()
					-- Force proper colors for the dashboard
					vim.cmd("highlight DashboardFooter guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
					vim.cmd("highlight DashboardHeader guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
					vim.cmd("highlight DashboardCenter guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
					vim.cmd("highlight DashboardShortcut guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
					
					-- Force specific colors for different parts
					vim.cmd("highlight DashboardShortcutIcon guifg=#fd79a8 guibg=NONE") -- Pink
					vim.cmd("highlight DashboardShortcutSection guifg=#74b9ff guibg=NONE") -- Blue
					vim.cmd("highlight DashboardShortcutKey guifg=#fdcb6e guibg=NONE") -- Yellow
					vim.cmd("highlight DashboardShortcutDesc guifg=#6bcf7f guibg=NONE") -- Green
				end,
			})
			
			-- Add a command to force refresh dashboard colors
			vim.api.nvim_create_user_command("DashboardColors", function()
				-- Force proper colors for the dashboard
				vim.cmd("highlight DashboardFooter guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
				vim.cmd("highlight DashboardHeader guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
				vim.cmd("highlight DashboardCenter guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
				vim.cmd("highlight DashboardShortcut guifg=#ffffff guibg=NONE ctermfg=white ctermbg=NONE")
				
				-- Force specific colors for different parts
				vim.cmd("highlight DashboardShortcutIcon guifg=#fd79a8 guibg=NONE") -- Pink
				vim.cmd("highlight DashboardShortcutSection guifg=#74b9ff guibg=NONE") -- Blue
				vim.cmd("highlight DashboardShortcutKey guifg=#fdcb6e guibg=NONE") -- Yellow
				vim.cmd("highlight DashboardShortcutDesc guifg=#6bcf7f guibg=NONE") -- Green
				
				vim.notify("‚ú® Dashboard colors refreshed! Your ASCII girl should be visible now!", vim.log.levels.INFO)
			end, {})
		end,
	},

	-- Session and project integration
	{
		"nvim-telescope/telescope.nvim",
		dependencies = {
			"nvim-lua/plenary.nvim",
		},
		config = function()
			-- „ÅÇ„Åü„Åó„ÄÅ„Çª„ÉÉ„Ç∑„Éß„É≥Ê§úÁ¥¢„ÇíÁæé„Åó„Åè„Åó„Åü„ÅÆ‚Ä¶Âè§„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÁ∞°Âçò„Å´Ë¶ã„Å§„Åã„Çã„Çà„ÅÜ„Å´Ôºà‚ïπ‚ó°‚ïπÔºâ
			
			-- Keybindings for session management
			vim.keymap.set("n", "<leader>fs", "<cmd>lua require('persistence').load()<CR>", { desc = "üîç Load Session" })
			vim.keymap.set("n", "<leader>fp", "<cmd>Telescope project<CR>", { desc = "üîç Find Projects" })
		end,
	},

	-- Auto-save sessions
	{
		"nvim-lua/plenary.nvim",
		config = function()
			-- „ÅÇ„Åü„Åó„ÄÅËá™Âãï„Çª„Éº„Éñ„ÇíÁæé„Åó„Åè„Åó„Åü„ÅÆ‚Ä¶„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåËá™ÂãïÁöÑ„Å´‰øùÂ≠ò„Åï„Çå„Çã„Çà„ÅÜ„Å´Ôºà‚ïπ‚ó°‚ïπÔºâ
			vim.api.nvim_create_autocmd("VimLeavePre", {
				callback = function()
					-- Auto-save session when leaving
					local ok, _ = pcall(require("persistence").save)
					if ok then
						vim.notify("üíæ Session saved automatically!", vim.log.levels.INFO)
					end
				end,
			})
			
			-- Auto-save session periodically
			vim.api.nvim_create_autocmd("CursorHold", {
				callback = function()
					-- Save session every 5 minutes of inactivity
					local ok, _ = pcall(require("persistence").save)
					if ok then
						-- Silent save - don't notify every time
					end
				end,
			})
		end,
	},
} 